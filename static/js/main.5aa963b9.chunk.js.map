{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.module.css","components/Section/Section.module.css","components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.jsx","components/Notification/Notification .jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Section","title","children","className","s","section","protoType","PropTypes","node","string","FeedbackOptions","labels","onLeaveFeedback","optionsBtn","map","label","type","option","onClick","Statistic","good","neutral","bad","total","positivePercentage","Notification","message","App","state","addFeedback","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Object","keys","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iIACAA,EAAOC,QAAU,CAAC,OAAS,gCAAgC,WAAa,sC,oBCAxED,EAAOC,QAAU,CAAC,QAAU,2B,qPCE5B,SAASC,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,sBAAKC,UAAWC,IAAEC,QAAlB,UACE,6BAAKJ,IACJC,KAKPF,EAAQM,UAAY,CAClBJ,SAAUK,IAAUC,KACpBP,MAAOM,IAAUE,QAGJT,Q,gBCOAU,MArBf,YAAuD,IAA5BC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,gBACjC,OACE,qBAAKT,UAAWC,IAAES,WAAlB,SACGF,EAAOG,KAAI,SAAAC,GAAK,OACf,wBAEEC,KAAK,SACLb,UAAWC,IAAEa,OACbC,QAAS,kBAAMN,EAAgBG,IAJjC,SAMGA,GALIA,S,MCqBAI,MA3Bf,YAAuE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC9C,OACE,+BACE,+BACE,0CACA,+BAAOJ,OAET,+BACE,6CACA,+BAAOC,OAET,+BACE,yCACA,+BAAOC,OAET,+BACE,2CACA,+BAAOC,OAET,+BACE,wDACA,iCAAOC,EAAP,c,MCZOC,MARf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,+BAAOA,KC+DDC,E,4MA1DbC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAWPO,YAAc,SAAAZ,GACZ,EAAKa,UAAS,SAAAC,GAAS,sBACpBd,EAASc,EAAUd,GAAU,O,EAIlCe,mBAAqB,WAAO,IAAD,EACM,EAAKJ,MACpC,OAFyB,EACjBR,KADiB,EACXC,QADW,EACFC,K,EAIzBW,gCAAkC,WAAO,IAAD,EACP,EAAKL,MAA5BR,EAD8B,EAC9BA,KAAMC,EADwB,EACxBA,QAASC,EADe,EACfA,IAEvB,OAAOY,KAAKC,MAAc,IAAPf,GAAeA,EAAOC,EAAUC,K,uDAG3C,IAAD,EACwBc,KAAKR,MAA5BR,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBX,EAAS0B,OAAOC,KAAK,CAAElB,OAAMC,UAASC,QACtCC,EAAQa,KAAKJ,qBACnB,OACE,qCACE,cAAC,EAAD,CAAS/B,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBU,OAAQA,EAAQC,gBAAiBwB,KAAKP,gBAExDN,EACC,cAAC,EAAD,CAAStB,MAAM,aAAf,SACE,cAAC,EAAD,CACEmB,KAAMgB,KAAKR,MAAMR,KACjBC,QAASe,KAAKR,MAAMP,QACpBC,IAAKc,KAAKR,MAAMN,IAChBC,MAAOA,EACPC,mBAAoBY,KAAKH,sCAI7B,cAAC,EAAD,CAAcP,QAAQ,6B,GApDda,aCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5aa963b9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"option\":\"FeedbackOptions_option__3YoEv\",\"optionsBtn\":\"FeedbackOptions_optionsBtn__20uyk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__2HkvQ\"};","import PropTypes from 'prop-types';\nimport s from './Section.module.css';\n\nfunction Section({ title, children }) {\n  return (\n    <div className={s.section}>\n      <h2>{title}</h2>\n      {children}\n    </div>\n  );\n}\n\nSection.protoType = {\n  children: PropTypes.node,\n  title: PropTypes.string,\n};\n\nexport default Section;\n","import PropTypes from 'prop-types';\nimport s from './FeedbackOptions.module.css';\n\nfunction FeedbackOptions({ labels, onLeaveFeedback }) {\n  return (\n    <div className={s.optionsBtn}>\n      {labels.map(label => (\n        <button\n          key={label}\n          type=\"button\"\n          className={s.option}\n          onClick={() => onLeaveFeedback(label)}\n        >\n          {label}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nFeedbackOptions.propTypes = {\n  option: PropTypes.string,\n};\n\nexport default FeedbackOptions;\n","import s from './Statistics.module.css';\n\nfunction Statistic({ good, neutral, bad, total, positivePercentage }) {\n  return (\n    <ul>\n      <li>\n        <span>good: </span>\n        <span>{good}</span>\n      </li>\n      <li>\n        <span>neutral: </span>\n        <span>{neutral}</span>\n      </li>\n      <li>\n        <span>bad: </span>\n        <span>{bad}</span>\n      </li>\n      <li>\n        <span>total: </span>\n        <span>{total}</span>\n      </li>\n      <li>\n        <span>positivePercentage: </span>\n        <span>{positivePercentage}%</span>\n      </li>\n    </ul>\n  );\n}\n\nexport default Statistic;\n","import s from './Notification.module.css';\nimport PropTypes from 'prop-types';\n\nfunction Notification({ message }) {\n  return <span>{message}</span>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n\nexport default Notification;\n","import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\nimport Section from './components/Section';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Statistic from './components/Statistics';\nimport Notification from './components/Notification/Notification ';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  static propTypes = {\n    good: PropTypes.number,\n    neutral: PropTypes.number,\n    bad: PropTypes.number,\n    total: PropTypes.number,\n    positivePercentage: PropTypes.number,\n  };\n\n  addFeedback = option => {\n    this.setState(prevState => ({\n      [option]: prevState[option] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good, neutral, bad } = this.state;\n\n    return Math.round((good * 100) / (good + neutral + bad));\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const labels = Object.keys({ good, neutral, bad });\n    const total = this.countTotalFeedback();\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions labels={labels} onLeaveFeedback={this.addFeedback} />\n        </Section>\n        {total ? (\n          <Section title=\"Statistics\">\n            <Statistic\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={total}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          </Section>\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}